#!/usr/bin/env bash

# Set environment variables for dev or CI
export APP_PORT=${APP_PORT:-80}
export DB_HOST=${DB_HOST:-mysql}
export DB_PORT=${DB_PORT:-3306}
export DB_ROOT_PASS=${DB_ROOT_PASS:=secret}
export DB_NAME=${DB_NAME:=wordpress}
export DB_USER=${DB_USER:=wordpress}
export DB_PASS=${DB_PASS:=secret}

# Decide which docker-compose file to use
COMPOSE_FILE="dev"

# Disable pseudo-TTY allocation for CI (Jenkins)
TTY=""

if [ ! -z "$BUILD_NUMBER" ]; then
  COMPOSE_FILE="ci"
  TTY="-T"
fi

COMPOSE="docker-compose -f docker-compose.$COMPOSE_FILE.yml"

if [ $# -gt 0 ]; then
  # If "composer" is used, pass-thru to "composer"
  # inside a new container
  if [ "$1" == "composer" ]; then
      shift 1
      $COMPOSE run --rm $TTY \
          -w /var/www/html \
          app \
          composer "$@"

  # If "wp" is used, pass-thru to "wp-cli"
  elif [ "$1" == "wp" ]; then
      shift 1
      $COMPOSE run --rm $TTY \
          -w /var/www/html \
          app \
          wp --allow-root "$@"

  # If "test" is used, run unit tests,
  # pass-thru any extra arguments to php-unit
  elif [ "$1" == "test" ]; then
      shift 1
      $COMPOSE run --rm $TTY \
          -w /var/www/html \
          app \
          ./vendor/bin/phpunit "$@"

  elif [ "$1" == "t" ]; then
      shift 1
      $COMPOSE exec \
          app \
          sh -c "cd /var/www/html && ./vendor/bin/phpunit $@"

  elif [ "$1" == "init" ]; then
    shift 1
    mkdir src
    $COMPOSE run --rm $TTY \
        -w /var/www/html \
        app \
        composer create-project roots/bedrock .
    $COMPOSE run --rm $TTY \
        -w /var/www/html/web/app/themes \
        app \
        composer create-project roots/sage $1 dev-master

  # Else, pass-thru args to docker-compose
  else
    $COMPOSE "$@"
  fi
else
  $COMPOSE ps
fi